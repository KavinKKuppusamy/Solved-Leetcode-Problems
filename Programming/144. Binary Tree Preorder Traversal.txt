144. Binary Tree Preorder Traversal

Pre-Order Traversal : Root -> Left -> Right

My solution:
------------

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def preorderTraversal(self, root):
        res = []
        def dfs(node):
            if node is None:
                return
            res.append(node.val)
            dfs(node.left)
            dfs(node.right)
        dfs(root)
        return res



Iterative Solution:
--------------------

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def preorderTraversal(self, root):
        res_values = []
        node_stack = [root]
        
        while len(node_stack) >= 1:
            curr_node = node_stack.pop()
            if curr_node is not None:
                res_values.append(curr_node.val)
                node_stack.append(curr_node.right) # Note that first right node has be added because we are using stack. So after adding left, we take last in first out.
                node_stack.append(curr_node.left)
        return res_values
                