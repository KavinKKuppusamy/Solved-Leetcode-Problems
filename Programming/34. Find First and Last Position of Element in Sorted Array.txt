34. Find First and Last Position of Element in Sorted Array

Naive Approach:
--------------

Do linear scan forward first to find the first occurrence and backward to find the last position.

Better Approach:
--------------
Use Binary Search

First do Binary search on the array to find the first position
Do the same to find the last position.


My solution:
------------

class Solution(object):
    def searchRange(self, nums, target):
        first_index = self.BinSearch(nums,target,True)
        if(first_index == -1):
            return [-1]*2
        else:
            last_index = self.BinSearch(nums,target,False)
            return [first_index,last_index]
        
        
    def BinSearch(self,nums,target,left_flag):
        i = 0
        j = len(nums)-1
        result = -1
        while(i<=j):
            mid = (i+j)//2
            if nums[mid] == target:
                if left_flag :
                    if mid == 0 or nums[mid-1] != target:
                        return mid
                    j = mid -1                    
                else:
                    if mid == len(nums) -1 or nums[mid+1] != target:
                        return mid
                    i = mid + 1
            elif nums[mid] < target:
                i = mid + 1
            else:
                j = mid - 1
        return result



Another Solution:
-----------------

class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:      
        def binarySearch(nums: List[int], target: int, findLeftmost: bool) -> int:
            index, l, r = -1, 0, len(nums)-1
            while l <= r:
                mid = (l+r)//2
                if nums[mid] == target:
                    index = mid
                if nums[mid] > target or (findLeftmost and nums[mid] == target):
                    r = mid - 1
                else:
                    l = mid + 1
            return index
        return [binarySearch(nums, target, True), binarySearch(nums, target, False)]

                 