881. Boats to Save People

Approach : Greedy (Two Pointer)
---------------------------------
Intuition
---------

If the heaviest person can share a boat with the lightest person, then do so. Otherwise, the heaviest person can't pair with anyone, so they get their own boat.

The reason this works is because if the lightest person can pair with anyone, they might as well pair with the heaviest person.

Algorithm
----------

Let people[i] to the currently lightest person, and people[j] to the heaviest.

Then, as described above, if the heaviest person can share a boat with the lightest person (if people[j] + people[i] <= limit) then do so; otherwise, the heaviest person sits in their own boat.

Complexity Analysis

Time Complexity: O(NlogN), where N is the length of people.

Space Complexity: O(N).

Solution:
---------
class Solution(object):
    def numRescueBoats(self, people, limit):
        people.sort()
        light,heavy = 0,len(people)-1
        boat_total = 0

        while(light <= heavy):

	    #Try to fit the light and heavy person into the boat
            if people[light] + people[heavy]  <= limit:
                boat_total += 1
                light += 1
                heavy -= 1 

            # when they don't fit, fit only the heavy person.
            else:
                boat_total += 1
                heavy -= 1

        return boat_total
  
Refined Code:

class Solution(object):
    def numRescueBoats(self, people, limit):
        people.sort()
        light,heavy = 0,len(people)-1
        boat_total = 0
        while(light <= heavy):
            boat_total += 1
            if people[light] + people[heavy]  <= limit:
                light += 1
            heavy -= 1 
        return boat_total
                              