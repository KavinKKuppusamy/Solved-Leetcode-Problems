56. Merge Intervals

Idea:
------

Take a ret_list and append first entry of the intervals.
Compare last element of the last entry of the ret_list,
	First if condition is to leave the interval if its already been accomodated(For eg [[1,4],[2,3]] -> o/p is [1,4])

Solution:
---------

class Solution(object):
    def merge(self, intervals):
        intervals.sort(key= lambda x : x[0])
        ret_list = [intervals[0]]
        for i in range(1, len(intervals)):
            if ret_list[-1][1] > intervals[i][1]:
                continue
            elif ret_list[-1][1] >= intervals[i][0]:
                ret_list[-1][1] = intervals[i][1]
            else:
                ret_list.append(intervals[i])
        return ret_list

Solution2:
-----------

    def merge(self, intervals: List[List[int]]) -> List[List[int]]:

        intervals.sort(key=lambda x: x[0])

        merged = []
        for interval in intervals:
            # if the list of merged intervals is empty or if the current
            # interval does not overlap with the previous, simply append it.
            if not merged or merged[-1][1] < interval[0]:
                merged.append(interval)
            else:
            # otherwise, there is overlap, so we merge the current and previous
            # intervals.
                merged[-1][1] = max(merged[-1][1], interval[1])

        return merged

Solution3 (In place)
-------------

class Solution(object):
    def merge(self, intervals):
        intervals.sort(key = lambda x : x[0])
        i = 1
        while i < len(intervals):
            if  intervals[i][0] <= intervals[i-1][1]:
                intervals[i-1][0] = min(intervals[i][0],intervals[i-1][0])
                intervals[i-1][1] = max(intervals[i][1],intervals[i-1][1])
                intervals.pop(i)
            else:
                i+= 1
        return intervals