155. Min Stack

Solution:
==========

Using Hint: Consider each node in the stack having a minimum value.

class MinStack:

    def __init__(self):
        self.stack = []
    
    def push(self, val: int) -> None:
        if self.stack == []:
            self.stack.append([val,val])
        else:
            stack_min = self.stack[-1][1]
            if stack_min > val:
                stack_min = val
            self.stack.append([val,stack_min])


    def pop(self) -> None:
        self.stack.pop(-1)
        

    def top(self) -> int:
        return self.stack[-1][0]
        

    def getMin(self) -> int:
        return self.stack[-1][1]
        


# Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(val)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()


Another Solution:

https://leetcode.com/problems/min-stack/discuss/938346/simple-and-fast-python-solution-using-2-lists-(greater86.51-faster)
class MinStack:

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.stk=[]
        self.min=[float('inf')]

    def push(self, x: int) -> None:
        self.stk.append(x)
        if x <= self.min[-1]: self.min.append(x)
        
    def pop(self) -> None:
        x=self.stk.pop()
        if x == self.min[-1]: self.min.pop()
        return self.stk

    def top(self) -> int:
        return self.stk[-1]

    def getMin(self) -> int:
        return self.min[-1]