238. Product of Array Except Self

Idea:
-----
Instead of dividing the product of all the numbers in the array by the number at a given index to get the corresponding product, we can make use of the product of all the numbers to the left and all the numbers to the right of the index. Multiplying these two individual products would give us the desired result as well.

Find left array and right array, return multiplied array of both.

Eg [1,2,3,4]

left_arr = [1,1,2,6]
right_arr = [24,12,4,1]

Solution:
--------

class Solution(object):
    def productExceptSelf(self, nums):
        n = len(nums)
        left_arr = [1]*n
        right_arr =[1]*n
        for i in range(1,n):
            left_arr[i] = left_arr[i-1]* nums[i-1]
        
        for i in range(n-2,-1,-1):
            right_arr[i] = right_arr[i+1]* nums[i+1]
            
        for i in range(n):
            left_arr[i] *=  right_arr[i]
        return left_arr
        
Optimized Solution: (Without extra o(n) space)
-------------------
Find left array. From reverse,Multiply the array value with accumulated right value.

class Solution(object):
    def productExceptSelf(self, nums):
        n = len(nums)
        right_val= 1
        out_arr = [1]*n
        for i in range(1,n):
            out_arr[i] = out_arr[i-1]* nums[i-1]
        for i in range(n-1,-1,-1):
            out_arr[i] = out_arr[i] * right_val
            right_val *= nums[i]
        return out_arr

or

class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        
        # The length of the input array 
        length = len(nums)
        
        # The answer array to be returned
        answer = [0]*length
        
        # answer[i] contains the product of all the elements to the left
        # Note: for the element at index '0', there are no elements to the left,
        # so the answer[0] would be 1
        answer[0] = 1
        for i in range(1, length):
            
            # answer[i - 1] already contains the product of elements to the left of 'i - 1'
            # Simply multiplying it with nums[i - 1] would give the product of all 
            # elements to the left of index 'i'
            answer[i] = nums[i - 1] * answer[i - 1]
        
        # R contains the product of all the elements to the right
        # Note: for the element at index 'length - 1', there are no elements to the right,
        # so the R would be 1
        R = 1;
        for i in reversed(range(length)):
            
            # For the index 'i', R would contain the 
            # product of all elements to the right. We update R accordingly
            answer[i] = answer[i] * R
            R *= nums[i]
        
        return answer



Other Solution:
------------------
class Solution(object):
    def productExceptSelf(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        start, end, n = 1, 1, len(nums)
        out = [1]*n 
        for i in range(len(nums)):
            out[i] *= start
            start *= nums[i]
            out[n-i-1] *= end
            end *= nums[n-i-1]
        return out

        
