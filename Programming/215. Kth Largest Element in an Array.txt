215. Kth Largest Element in an Array



class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        nums = [_*-1 for _ in nums]
        heapq.heapify(nums)
        for _ in range(k):
            ret_val = heapq.heappop(nums)
        return ret_val*-1

Idea: Using Quick Select and moving all the elements > pivot to left
=======================================================================

class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        return self.quickSelect(nums, 0, len(nums)-1, k)

    def quickSelect(self, nums, start, n, k): # quick select
        print(nums,start,n)
        pos = self.partition(nums, start, n)
        print('pivot',pos)
        if pos == k-1:
            return nums[pos]
        elif pos >= k:
            return self.quickSelect(nums, start, pos - 1, k)
        return self.quickSelect(nums, pos + 1, n, k)

    def partition(self, nums, left, right):
        pivot = nums[right] # pick the last one as pivot
        i = left
        for j in range(left, right): # left to right -1
            if nums[j] > pivot: # the larger elements are in left side
                nums[j], nums[i] = nums[i], nums[j]
                i += 1
        nums[right], nums[i] = nums[i], nums[right] # swap the i and the last element
        return i

Idea: Quick Select and moving all the element > pivot to right
===================================================================
https://www.geeksforgeeks.org/quickselect-algorithm/

https://www.baeldung.com/java-kth-largest-element
https://leetcode.com/problems/kth-largest-element-in-an-array/discuss/60306/Python-different-solutions-with-comments-(bubble-sort-selection-sort-heap-sort-and-quick-sort).

https://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array/            