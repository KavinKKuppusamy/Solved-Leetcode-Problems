127. Word Ladder

Idea:
=====
https://www.youtube.com/watch?v=ZVJ3asMoZ18&ab_channel=TECHDOSE
https://leetcode.com/problems/word-ladder/discuss/346920/Python3-Breadth-first-search
https://leetcode.com/problems/word-ladder/discuss/354573/Python3-(BFS-by-deque)(BFS-by-set)(BidirectionalBFS)-(readable)-(fast)-(beats-96)
https://leetcode.com/problems/word-ladder/discuss/40710/Share-my-two-Python-solutions%3A-a-very-concise-one-(12-lines-~160ms)-and-an-optimized-solution(~100ms)

Follow up Questions:
-----------------------

Why DFS can't be used for shortest distance on graph, but works on tree ?

Because in the tree there is only one path from one verticle to another. DFS is taking one way and going by that way (there's no gurantee that way is the best), but in tree there is as that way is unique.

https://codeforces.com/blog/entry/16479?f0a28=1

Time Complexity:
=================

Time Complexity: O(M^2 X N) where M is the length of each word and N is the total number of words in the input word list.

Solution: Using BFS
====================

class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        if endWord not in wordList:
            return 0
        w_len = len(beginWord)
        word_dict = defaultdict(list)
        for word in wordList:
            for i in range(w_len):
                word_dict[word[:i] + '*' + word[i+1:]].append(word)
        queue = [beginWord]
        levels = 1
        level_nodes = 1
        visited = {w:False for w in wordList}
        visited[beginWord] = True
        print(word_dict)
        while queue:
            for i in range(level_nodes):
                curr_word = queue.pop(0)
                for l in range(w_len):
                    for adj_word in word_dict[curr_word[:l] + '*' + curr_word[l+1:]]:
                        if adj_word == endWord:
                            return levels + 1
                        if not visited[adj_word]:
                            queue.append(adj_word)
                            visited[adj_word] = True
            level_nodes = len(queue)
            levels +=  1
        return 0
            



Solution2:
==========


from collections import defaultdict
from collections import deque
class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: int
        """
        if endWord not in wordList or not endWord or not beginWord or not wordList:
            return 0
        L = len(beginWord)
        all_combo_dict = defaultdict(list)
        for word in wordList:
            for i in range(L):
                all_combo_dict[word[:i] + "*" + word[i+1:]].append(word) 
        queue = deque([(beginWord, 1)])
        visited = set()
        visited.add(beginWord)
        while queue:
            current_word, level = queue.popleft()
            for i in range(L):
                intermediate_word = current_word[:i] + "*" + current_word[i+1:]
                for word in all_combo_dict[intermediate_word]:
                    if word == endWord:
                        return level + 1
                    if word not in visited:
                        visited.add(word)
                        queue.append((word, level + 1))
        return 0