
189. Rotate Array



Failed Approach (TLE)
-------------------

class Solution(object):
    def rotate(self, nums, k):
        
        k = k % len(nums) ## To speed up the rotation and prevent the unwanted and repetitive rotation, becuase when k=3 , rotating 6 times is equal to rotating 3 times when  length of array is 3

        rotate = 0 
        while rotate < k:
            nums[:]= [nums[-1]] + nums[:-1]
            rotate += 1


Using Python Slicing
-------------------
class Solution(object):
    def rotate(self, nums, k):
        
        k = k % len(nums) ## To speed up the rotation and prevent the unwanted and repetitive rotation, becuase when k=3 , rotating 6 times is equal to rotating 3 times 

        nums[:]= nums[-k:] + nums[:-k]

Time complexity - O(n)
Space Complexity - O(n) because of copying 

Reverse Method :
-------------------
1) reverse all the elements of the array. 
2) reversing the first k elements.
3) reversing the rest n-k.

Let n = 7 and k = 3.

Original List                   : 1 2 3 4 5 6 7
After reversing all numbers     : 7 6 5 4 3 2 1
After reversing first k numbers : 5 6 7 4 3 2 1
After revering last n-k numbers : 5 6 7 1 2 3 4 --> Result


class Solution(object):
    def rotate(self, nums, k):
        k = k % len(nums)
        self.reverse(nums,0,len(nums)-1)
        self.reverse(nums,0,k-1)
        self.reverse(nums,k,len(nums)-1)
        
    def reverse(self,nums,start,end):
        while(start<end):
            nums[start],nums[end] = nums[end],nums[start]
            start += 1
            end -= 1
Time complexity: O(n). n elements are reversed a total of three times.

Space complexity: O(1). No extra space is used.